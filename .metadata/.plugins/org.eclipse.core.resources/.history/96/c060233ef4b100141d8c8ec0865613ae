package com.biplav.aiplanning.problems.monkcanibbal;

import java.util.Collection;
import java.util.HashSet;

import com.biplav.aiplanning.definitions.IState;

public class State implements IState {

	public int missionaries_left;
	public int cannibals_left;

	public int missionaries_right;
	public int cannibals_right;

	public boolean boat; // initial position

	public State(int missionaries_left, int canibals_left,
			int missionaries_right, int cannibals_right, boolean boat) {
		super();
		this.missionaries_left = missionaries_left;
		this.cannibals_left = canibals_left;
		this.missionaries_right = missionaries_right;
		this.cannibals_right = cannibals_right;
		this.boat = boat;
	}

	public boolean isValid() {
		if (cannibals_right > missionaries_right
				|| cannibals_left > missionaries_right)
			return false;
		return true;
	}

	@Override
	public Collection<IState> successor() {
		if (boat == true) { // On the left side
			return successorLeft();
		} else {
			return successorRight();
		}
	}

	private Collection<IState> successorLeft() {
		Collection<IState> newStates = new HashSet<IState>();
		// possible actions
		if (missionaries_left >= 2) {// 2m
			State state = new State(missionaries_left - 2, cannibals_left,
					missionaries_right + 2, cannibals_right, false);
			if (state.isValid())
				newStates.add(state);
		} else if (cannibals_left >= 2) { // 2c
			State state = new State(missionaries_left, cannibals_left - 2,
					missionaries_right, cannibals_right + 2, false);
			if (state.isValid())
				newStates.add(state);
		} else if (missionaries_left >= 1 && cannibals_left >= 1) { // 1m1c
			State state = new State(missionaries_left - 1, cannibals_left - 1,
					missionaries_right + 1, cannibals_right + 1, false);
			if (state.isValid())
				newStates.add(state);
		} else if (missionaries_left >= 1) { // 1m
			State state = new State(missionaries_left - 1, cannibals_left,
					missionaries_right + 1, cannibals_right, false);
			if (state.isValid())
				newStates.add(state);
		} else if (cannibals_left >= 1) { // 1c
			State state = new State(missionaries_left, cannibals_left - 1,
					missionaries_right, cannibals_right + 1, false);
			if (state.isValid())
				newStates.add(state);
		}
		return newStates;
	}
	//Editing this
	private Collection<IState> successorRight() {
		Collection<IState> newStates = new HashSet<IState>();
		// possible actions
		if (missionaries_right >= 2) {//2m
			State state = new State(missionaries_left + 2, cannibals_left,
					missionaries_right - 2, cannibals_right, true);
			if (state.isValid())
				newStates.add(state);
		} else if (cannibals_right >= 2) { //2c
			State state = new State(missionaries_left, cannibals_left + 2,
					missionaries_right, cannibals_right - 2, true);
			if (state.isValid())
				newStates.add(state);
		} else if (missionaries_right >= 1 && cannibals_right >= 1) { // 1m1c
			State state = new State(missionaries_left + 1, cannibals_left + 1,
					missionaries_right - 1, cannibals_right - 1, true);
			if (state.isValid())
				newStates.add(state);
		} else if (missionaries_right >= 1) { //1m
			State state = new State(missionaries_left + 1, cannibals_left,
					missionaries_right - 1, cannibals_right, true);
			if (state.isValid())
				newStates.add(state);
		} else if (cannibals_right >= 1) { //1c
			State state = new State(missionaries_left, cannibals_left + 1,
					missionaries_right, cannibals_right - 1, true);
			if (state.isValid())
				newStates.add(state);
		}
		return newStates;
	}

}
